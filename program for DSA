#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <stdint.h>

// Function to compute modular inverse (using Extended Euclidean Algorithm)
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) return 0;

    while (a > 1) {
        // q is quotient
        q = a / m;
        t = m;

        // m is remainder now, process same as Euclid's algorithm
        m = a % m;
        a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0) x1 += m0;

    return x1;
}

// Function to generate a random k
int generate_k(int q) {
    int k;
    do {
        k = rand() % (q - 1) + 1; // k should be in the range [1, q-1]
    } while (k == 0);
    return k;
}

// Function to compute the DSA signature
void dsa_sign(const char *message, int p, int q, int g, int x, int *r, int *s) {
    int k = generate_k(q); // Generate random k
    int k_inv = mod_inverse(k, q); // Compute k inverse

    // Hash the message (for simplicity, we will use a simple hash function)
    int hash = strlen(message) % q; // Simple hash function (not secure)

    // Compute r = (g^k mod p) mod q
    int r_val = 1; // g^k mod p
    for (int i = 0; i < k; i++) {
        r_val = (r_val * g) % p;
    }
    r_val = r_val % q;

    if (r_val == 0) {
        // If r is 0, regenerate k
        dsa_sign(message, p, q, g, x, r, s);
        return;
    }

    // Compute s = (k_inv * (hash + x * r)) mod q
    *s = (k_inv * (hash + x * r_val)) % q;

    if (*s == 0) {
        // If s is 0, regenerate k
        dsa_sign(message, p, q, g, x, r, s);
        return;
    }

    *r = r_val; // Set the output r
}

int main() {
    srand(time(NULL)); // Seed the random number generator

    // Example parameters (these should be securely generated in practice)
    int p = 23; // A prime number
    int q = 11; // A prime divisor of p-1
    int g = 4;  // A generator
    int x = 7;  // Private key (should be kept secret)

    const char *message = "Hello, DSA!";
    int r, s;

    // Generate the DSA signature
    dsa_sign(message, p, q, g, x, &r, &s);

    // Print the signature
    printf("Signature:\n");
    printf("r: %d\n", r);
    printf("s: %d\n", s);

    return 0;
}
