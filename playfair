#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to create the Playfair matrix
void createPlayfairMatrix(char key[], char matrix[SIZE][SIZE]) {
    int i, j, k = 0;
    int used[26] = {0};  // To keep track of used letters in the matrix

    // Fill the matrix with key characters first
    for (i = 0; key[i] != '\0'; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';  // Merge 'J' and 'I' for 5x5 matrix
        if (!used[ch - 'A']) {
            matrix[k / SIZE][k % SIZE] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }

    // Fill remaining positions in the matrix with other letters
    for (i = 0; i < 26; i++) {
        if (!used[i] && (i + 'A') != 'J') {  // Skip 'J'
            matrix[k / SIZE][k % SIZE] = i + 'A';
            k++;
        }
    }
}

// Function to find the position of a character in the Playfair matrix
void findPosition(char ch, char matrix[SIZE][SIZE], int *row, int *col) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to preprocess the plaintext
void preprocessText(char plaintext[], char processed[]) {
    int i, j = 0;
    int len = strlen(plaintext);

    // Convert all to uppercase and remove non-alphabet characters
    for (i = 0; i < len; i++) {
        if (isalpha(plaintext[i])) {
            processed[j++] = toupper(plaintext[i]);
        }
    }

    // Add 'X' between duplicate letters and at the end if odd length
    for (i = 0; i < j - 1; i++) {
        if (processed[i] == processed[i + 1]) {
            for (int k = j; k > i + 1; k--) {
                processed[k] = processed[k - 1];
            }
            processed[i + 1] = 'X';
            j++;
        }
    }

    // If length is odd, append 'X' at the end
    if (j % 2 != 0) {
        processed[j++] = 'X';
    }

    processed[j] = '\0'; // Null terminate the processed string
}

// Function to encrypt the plaintext using the Playfair cipher
void encryptPlayfair(char plaintext[], char matrix[SIZE][SIZE], char ciphertext[]) {
    int i, row1, col1, row2, col2;
    int len = strlen(plaintext);
    int k = 0;

    // Process each pair of letters
    for (i = 0; i < len; i += 2) {
        findPosition(plaintext[i], matrix, &row1, &col1);
        findPosition(plaintext[i + 1], matrix, &row2, &col2);

        if (row1 == row2) {
            // Same row: move to the right
            ciphertext[k++] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[k++] = matrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            // Same column: move down
            ciphertext[k++] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[k++] = matrix[(row2 + 1) % SIZE][col2];
        } else {
            // Rectangle: swap corners
            ciphertext[k++] = matrix[row1][col2];
            ciphertext[k++] = matrix[row2][col1];
        }
    }
    ciphertext[k] = '\0'; // Null terminate the ciphertext string
}

int main() {
    char key[100], plaintext[100], processedText[100], ciphertext[100];
    char matrix[SIZE][SIZE];

    // Input the keyword and plaintext
    printf("Enter the keyword: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0'; // Remove newline from fgets input

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove newline from fgets input

    // Preprocess the text (remove non-alphabetic characters, add 'X' if needed)
    preprocessText(plaintext, processedText);

    // Create the Playfair matrix
    createPlayfairMatrix(key, matrix);

    // Encrypt the preprocessed text
    encryptPlayfair(processedText, matrix, ciphertext);

    // Display the resulting ciphertext
    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
