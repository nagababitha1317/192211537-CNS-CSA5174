#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to encrypt plaintext using the substitution cipher
void encrypt(char* plaintext, char* ciphertext, char* key) {
    int i;
    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) { // Only encrypt alphabetic characters
            // Check if the character is lowercase or uppercase
            char base = islower(plaintext[i]) ? 'a' : 'A'; // Handle case sensitivity
            int index = tolower(plaintext[i]) - 'a'; // Find the index in the alphabet
            ciphertext[i] = islower(plaintext[i]) ? key[index] : toupper(key[index]); // Map using key
        } else {
            ciphertext[i] = plaintext[i]; // Non-alphabetic characters remain unchanged
        }
    }
    ciphertext[i] = '\0'; // Null-terminate the ciphertext string
}

int main() {
    char plaintext[256];
    char ciphertext[256];
    char key[26];

    // Define the substitution key
    printf("Enter the substitution key (26 letters, no duplicates):\n");
    fgets(key, sizeof(key), stdin);

    // Remove the newline character if fgets adds it
    key[strcspn(key, "\n")] = '\0';

    // Ensure the key is exactly 26 characters long
    if (strlen(key) != 26) {
        printf("Error: Key must contain exactly 26 characters.\n");
        return 1;
    }

    // Validate that the key contains only unique letters
    for (int i = 0; i < 26; i++) {
        if (!isalpha(key[i])) {
            printf("Error: Key must only contain alphabetic characters.\n");
            return 1;
        }
        for (int j = i + 1; j < 26; j++) {
            if (tolower(key[i]) == tolower(key[j])) {
                printf("Error: Key contains duplicate characters.\n");
                return 1;
            }
        }
    }

    // Get the plaintext to encrypt
    printf("Enter the plaintext to encrypt:\n");
    fgets(plaintext, sizeof(plaintext), stdin);

    // Remove the newline character if fgets adds it
    plaintext[strcspn(plaintext, "\n")] = '\0';

    // Encrypt the plaintext
    encrypt(plaintext, ciphertext, key);

    // Display the resulting ciphertext
    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
