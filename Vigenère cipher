#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define ALPHABET_SIZE 26

// Function to encrypt the plaintext using the one-time pad Vigen√®re cipher
void encrypt(const char *plaintext, const int *key, int key_length, char *ciphertext) {
    int text_length = strlen(plaintext);
    for (int i = 0; i < text_length; i++) {
        if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') {
            // Encrypt uppercase letters
            ciphertext[i] = 'A' + (plaintext[i] - 'A' + key[i % key_length]) % ALPHABET_SIZE;
        } else if (plaintext[i] >= 'a' && plaintext[i] <= 'z') {
            // Encrypt lowercase letters
            ciphertext[i] = 'a' + (plaintext[i] - 'a' + key[i % key_length]) % ALPHABET_SIZE;
        } else {
            // Non-alphabet characters remain unchanged
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[text_length] = '\0'; // Null-terminate the ciphertext string
}

// Function to generate a random key of specified length
void generate_random_key(int *key, int key_length) {
    for (int i = 0; i < key_length; i++) {
        key[i] = rand() % ALPHABET_SIZE; // Generate random number between 0 and 25
    }
}

int main() {
    srand(time(NULL)); // Seed the random number generator

    char plaintext[256];
    int key_length;

    // Input the plaintext
    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0; // Remove newline character

    // Input the length of the key
    printf("Enter the length of the key: ");
    scanf("%d", &key_length);

    int *key = (int *)malloc(key_length * sizeof(int));
    if (key == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }

    // Generate the random key
    generate_random_key(key, key_length);

    // Print the generated key
    printf("Generated Key: ");
    for (int i = 0; i < key_length; i++) {
        printf("%d ", key[i]);
    }
    printf("\n");

    char ciphertext[256];
    encrypt(plaintext, key, key_length, ciphertext);

    // Output the ciphertext
    printf("Ciphertext: %s\n", ciphertext);

    // Clean up
    free(key);
    return 0;
}
