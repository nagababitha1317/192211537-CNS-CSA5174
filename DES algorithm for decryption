#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define BLOCK_SIZE 8
#define KEY_SIZE 8
#define NUM_ROUNDS 16

// Define the initial permutation (IP) table and final permutation (FP) table
// These are standard DES values, you can refer to official DES documentation for exact values

// Permutation table (IP and FP, we'll use simplified values)
int IP[] = {58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 
            61, 53, 45, 37, 29, 21, 13, 5, 59, 51, 43, 35, 27, 19, 11, 3, 62, 55, 47, 39, 31, 23, 15, 7};

int FP[] = {40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 
            37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 
            34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25};

// Define the expansion permutation (E) for the right half of the block
int E[] = {32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 
           16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 
           30, 31, 32, 1};

// Define the S-Boxes (simplified for brevity, refer to the full table for actual use)
int S[8][4][16] = {{{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
                   {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
                   {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
                   {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}},
                  // ... Repeat for S1-S8
                };

// Function to apply the permutation for initial and final permutations
void permute(uint64_t *block, int *table, int size) {
    uint64_t temp = 0;
    for (int i = 0; i < size; i++) {
        int bit = (*block >> (64 - table[i])) & 1;
        temp |= (bit << (size - i - 1));
    }
    *block = temp;
}

// Key expansion and generation of 16 subkeys
void key_schedule(uint64_t key, uint64_t subkeys[NUM_ROUNDS]) {
    // Simplified key expansion (just left shifts for illustration)
    uint64_t C = (key >> 28) & 0xFFFFFFF;  // Left half of the key
    uint64_t D = key & 0xFFFFFFF;  // Right half of the key

    // Perform 16 rounds of key schedule
    for (int round = 0; round < NUM_ROUNDS; round++) {
        C = (C << 1) | (C >> 27);  // Left shift of C
        D = (D << 1) | (D >> 27);  // Left shift of D

        C &= 0xFFFFFFF;  // Keep only the lower 28 bits
        D &= 0xFFFFFFF;  // Keep only the lower 28 bits

        subkeys[round] = (C << 28) | D;  // Combine C and D to form the subkey
    }
}

// DES Decryption function
void des_decrypt(uint64_t ciphertext, uint64_t key, uint64_t *plaintext) {
    uint64_t block = ciphertext;
    permute(&block, IP, 64);  // Apply initial permutation

    uint64_t subkeys[NUM_ROUNDS];
    key_schedule(key, subkeys);  // Generate subkeys for decryption

    // Split the block into two 32-bit halves
    uint32_t L = block >> 32;
    uint32_t R = block & 0xFFFFFFFF;

    // Perform 16 rounds of decryption
    for (int round = NUM_ROUNDS - 1; round >= 0; round--) {
        uint32_t expanded_R = 0;  // Expansion of the right half
        for (int i = 0; i < 48; i++) {
            expanded_R |= ((R >> (32 - E[i])) & 1) << (47 - i);
        }

        uint32_t temp = expanded_R ^ subkeys[round];  // XOR with the round key

        uint32_t new_R = 0;
        // S-box substitution (simplified for brevity)
        for (int i = 0; i < 8; i++) {
            int row = (temp >> (6 * i + 5)) & 3;
            int col = (temp >> (6 * i)) & 15;
            new_R |= (S[i][row][col] << (4 * (7 - i)));
        }

        // Permutation (P4) on the result of S-boxes
        uint32_t P4_result = 0;
        for (int i = 0; i < 32; i++) {
            P4_result |= ((new_R >> (32 - E[i])) & 1) << (31 - i);
        }

        // XOR with the left half and swap
        L ^= P4_result;
        if (round != 0) {
            uint32_t temp_L = L;
            L = R;
            R = temp_L;
        }
    }

    // Combine L and R and apply the final permutation
    block = ((uint64_t)L << 32) | R;
    permute(&block, FP, 64);  // Apply final permutation

    *plaintext = block;  // Store the decrypted result
}

int main() {
    uint64_t ciphertext = 0xC0FFEE;  // Example ciphertext (64-bit)
    uint64_t key = 0x1234567890ABCDEF;  // Example key (64-bit)
    uint64_t plaintext;

    des_decrypt(ciphertext, key, &plaintext);

    printf("Decrypted Plaintext: 0x%lx\n", plaintext);
    return 0;
}
